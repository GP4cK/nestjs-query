"use strict";(self.webpackChunknestjs_query=self.webpackChunknestjs_query||[]).push([[6578],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>c});var a=n(7294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var i=a.createContext({}),d=function(e){var t=a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=d(e.components);return a.createElement(i.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,l=e.mdxType,r=e.originalType,i=e.parentName,u=p(e,["components","mdxType","originalType","parentName"]),m=d(n),c=l,h=m["".concat(i,".").concat(c)]||m[c]||s[c]||r;return n?a.createElement(h,o(o({ref:t},u),{},{components:n})):a.createElement(h,o({ref:t},u))}));function c(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var r=n.length,o=new Array(r);o[0]=m;var p={};for(var i in t)hasOwnProperty.call(t,i)&&(p[i]=t[i]);p.originalType=e,p.mdxType="string"==typeof e?e:l,o[1]=p;for(var d=2;d<r;d++)o[d]=n[d];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},8215:(e,t,n)=>{n.d(t,{Z:()=>l});var a=n(7294);const l=function(e){var t=e.children,n=e.hidden,l=e.className;return a.createElement("div",{role:"tabpanel",hidden:n,className:l},t)}},6396:(e,t,n)=>{n.d(t,{Z:()=>m});var a=n(7462),l=n(7294),r=n(2389),o=n(9443);const p=function(){var e=(0,l.useContext)(o.Z);if(null==e)throw new Error('"useUserPreferencesContext" is used outside of "Layout" component.');return e};var i=n(3616),d=n(6010);const u="tabItem_vU9c";function s(e){var t,n,a,r=e.lazy,o=e.block,s=e.defaultValue,m=e.values,c=e.groupId,h=e.className,k=l.Children.map(e.children,(function(e){if((0,l.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),v=null!=m?m:k.map((function(e){var t=e.props;return{value:t.value,label:t.label}})),T=(0,i.lx)(v,(function(e,t){return e.value===t.value}));if(T.length>0)throw new Error('Docusaurus error: Duplicate values "'+T.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var f=null===s?s:null!=(t=null!=s?s:null==(n=k.find((function(e){return e.props.default})))?void 0:n.props.value)?t:null==(a=k[0])?void 0:a.props.value;if(null!==f&&!v.some((function(e){return e.value===f})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+f+'" but none of its children has the corresponding value. Available values are: '+v.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var g=p(),y=g.tabGroupChoices,b=g.setTabGroupChoices,N=(0,l.useState)(f),x=N[0],C=N[1],O=[],I=(0,i.o5)().blockElementScrollPositionUntilNextRender;if(null!=c){var w=y[c];null!=w&&w!==x&&v.some((function(e){return e.value===w}))&&C(w)}var q=function(e){var t=e.currentTarget,n=O.indexOf(t),a=v[n].value;a!==x&&(I(t),C(a),null!=c&&b(c,a))},D=function(e){var t,n=null;switch(e.key){case"ArrowRight":var a=O.indexOf(e.currentTarget)+1;n=O[a]||O[0];break;case"ArrowLeft":var l=O.indexOf(e.currentTarget)-1;n=O[l]||O[O.length-1]}null==(t=n)||t.focus()};return l.createElement("div",{className:"tabs-container"},l.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,d.Z)("tabs",{"tabs--block":o},h)},v.map((function(e){var t=e.value,n=e.label;return l.createElement("li",{role:"tab",tabIndex:x===t?0:-1,"aria-selected":x===t,className:(0,d.Z)("tabs__item",u,{"tabs__item--active":x===t}),key:t,ref:function(e){return O.push(e)},onKeyDown:D,onFocus:q,onClick:q},null!=n?n:t)}))),r?(0,l.cloneElement)(k.filter((function(e){return e.props.value===x}))[0],{className:"margin-vert--md"}):l.createElement("div",{className:"margin-vert--md"},k.map((function(e,t){return(0,l.cloneElement)(e,{key:t,hidden:e.props.value!==x})}))))}function m(e){var t=(0,r.Z)();return l.createElement(s,(0,a.Z)({key:String(t)},e))}},5347:(e,t,n)=>{n.r(t),n.d(t,{contentTitle:()=>u,default:()=>h,frontMatter:()=>d,metadata:()=>s,toc:()=>m});var a=n(7462),l=n(3366),r=(n(7294),n(3905)),o=n(6396),p=n(8215),i=["components"],d={title:"Mutations"},u=void 0,s={unversionedId:"graphql/mutations",id:"graphql/mutations",title:"Mutations",description:"The CRUDResolver automatically exposes six mutation endpoints. The endpoints names will be derived",source:"@site/docs/graphql/mutations.mdx",sourceDirName:"graphql",slug:"/graphql/mutations",permalink:"/nestjs-query/docs/graphql/mutations",editUrl:"https://github.com/tripss/nestjs-query/edit/master/documentation/docs/graphql/mutations.mdx",tags:[],version:"current",frontMatter:{title:"Mutations"},sidebar:"docs",previous:{title:"Queries",permalink:"/nestjs-query/docs/graphql/queries"},next:{title:"Paging",permalink:"/nestjs-query/docs/graphql/paging"}},m=[{value:"Create One",id:"create-one",children:[],level:3},{value:"Create Many",id:"create-many",children:[{value:"Examples",id:"examples",children:[],level:4}],level:3},{value:"Update One",id:"update-one",children:[{value:"Examples",id:"examples-1",children:[],level:4}],level:3},{value:"Update Many",id:"update-many",children:[{value:"Examples",id:"examples-2",children:[],level:4}],level:3},{value:"Delete One",id:"delete-one",children:[{value:"Examples",id:"examples-3",children:[],level:4}],level:3},{value:"Delete Many",id:"delete-many",children:[{value:"Examples",id:"examples-4",children:[],level:4}],level:3}],c={toc:m};function h(e){var t=e.components,n=(0,l.Z)(e,i);return(0,r.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"The ",(0,r.kt)("a",{parentName:"p",href:"/nestjs-query/docs/graphql/resolvers"},"CRUDResolver")," automatically exposes six mutation endpoints. The endpoints names will be derived\nfrom name provided to ",(0,r.kt)("inlineCode",{parentName:"p"},"@ObjectType")," or the class name."),(0,r.kt)("p",null,"The following examples are based on the following ",(0,r.kt)("inlineCode",{parentName:"p"},"TodoItemDTO")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="todo-item.dto.ts"',title:'"todo-item.dto.ts"'},"import { FilterableField, IDField } from '@ptc-org/nestjs-query-graphql';\nimport { ObjectType, ID, GraphQLISODateTime } from '@nestjs/graphql';\n\n@ObjectType('TodoItem')\nexport class TodoItemDTO {\n  @IDField(() => ID)\n  id!: string;\n\n  @FilterableField()\n  title!: string;\n\n  @FilterableField()\n  completed!: boolean;\n\n  @FilterableField(() => GraphQLISODateTime)\n  created!: Date;\n\n  @FilterableField(() => GraphQLISODateTime)\n  updated!: Date;\n}\n\n")),(0,r.kt)("p",null,"In the following examples you will see the following endpoints referenced"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"createOneTodoItem")," - graphql endpoint to create a single record.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"createManyTodoItems")," - graphql endpoint to create multiple records,")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"updateOneTodoItem")," - graphql endpoint to update a single record by id.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"updateManyTodoItems")," - graphql endpoint update multiple records with a filter,")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"deleteOneTodoItem")," - graphql endpoint to delete one record by id.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"deleteManyTodoItems")," - graphql endpoint to delete multiple records with a filter."))),(0,r.kt)("h3",{id:"create-one"},"Create One"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"CRUDResolver")," will by default expose a ",(0,r.kt)("inlineCode",{parentName:"p"},"createOne")," mutation using the name of the DTO to name the mutation."),(0,r.kt)("p",null,"In this example we create a single ",(0,r.kt)("inlineCode",{parentName:"p"},"TodoItem"),", the input by default will be a ",(0,r.kt)("inlineCode",{parentName:"p"},"Partial")," of the DTO."),(0,r.kt)(o.Z,{defaultValue:"graphql",values:[{label:"GraphQL",value:"graphql"},{label:"Response",value:"response"}],mdxType:"Tabs"},(0,r.kt)(p.Z,{value:"graphql",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},'mutation {\n  createOneTodoItem(\n    input: { todoItem: { title: "Create One Todo Item", completed: false } }\n  ) {\n    id\n    title\n    completed\n    created\n    updated\n  }\n}\n'))),(0,r.kt)(p.Z,{value:"response",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "data": {\n    "createOneTodoItem": {\n      "id": "1",\n      "title": "Create One Todo Item",\n      "completed": false,\n      "created": "2020-01-14T09:01:35.834Z",\n      "updated": "2020-01-14T09:01:35.834Z"\n    }\n  }\n}\n')))),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"create-many"},"Create Many"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"CRUDResolver")," will by default expose a ",(0,r.kt)("inlineCode",{parentName:"p"},"createMany")," mutation using the name of the DTO to name the mutation."),(0,r.kt)("p",null,"In this example we create multiple ",(0,r.kt)("inlineCode",{parentName:"p"},"TodoItems"),", the each record is a ",(0,r.kt)("inlineCode",{parentName:"p"},"Partial")," of the DTO."),(0,r.kt)("h4",{id:"examples"},"Examples"),(0,r.kt)("p",null,"The following example creates two ",(0,r.kt)("inlineCode",{parentName:"p"},"TodoItems"),"."),(0,r.kt)(o.Z,{defaultValue:"graphql",values:[{label:"GraphQL",value:"graphql"},{label:"Response",value:"response"}],mdxType:"Tabs"},(0,r.kt)(p.Z,{value:"graphql",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},'mutation {\n  createManyTodoItems(\n    input: {\n      todoItems: [\n        { title: "Create Many Todo Items - 1", completed: false }\n        { title: "Create Many Todo Items - 2", completed: true }\n      ]\n    }\n  ) {\n    id\n    title\n    completed\n    created\n    updated\n  }\n}\n'))),(0,r.kt)(p.Z,{value:"response",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "data": {\n    "createManyTodoItems": [\n      {\n        "id": "2",\n        "title": "Create Many Todo Items - 1",\n        "completed": false,\n        "created": "2020-01-14T09:01:55.110Z",\n        "updated": "2020-01-14T09:01:55.110Z"\n      },\n      {\n        "id": "3",\n        "title": "Create Many Todo Items - 2",\n        "completed": true,\n        "created": "2020-01-14T09:01:55.110Z",\n        "updated": "2020-01-14T09:01:55.110Z"\n      }\n    ]\n  }\n}\n')))),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"update-one"},"Update One"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"CRUDResolver")," will by default expose an ",(0,r.kt)("inlineCode",{parentName:"p"},"updateOne")," mutation that takes two fields:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"id"),": The id of the record to update."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"update"),": The values to update on the record. This is a partial so you only have to pass in the values you want to\nchange.")),(0,r.kt)("h4",{id:"examples-1"},"Examples"),(0,r.kt)("p",null,"The following example updates the record with ",(0,r.kt)("inlineCode",{parentName:"p"},"id")," equal to ",(0,r.kt)("inlineCode",{parentName:"p"},"1")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"completed=true")),(0,r.kt)(o.Z,{defaultValue:"graphql",values:[{label:"GraphQL",value:"graphql"},{label:"Response",value:"response"}],mdxType:"Tabs"},(0,r.kt)(p.Z,{value:"graphql",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"mutation {\n  updateOneTodoItem(input: { id: 1, update: { completed: true } }) {\n    id\n    title\n    completed\n    created\n    updated\n  }\n}\n"))),(0,r.kt)(p.Z,{value:"response",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "data": {\n    "updateOneTodoItem": {\n      "id": "1",\n      "title": "Create One Todo Item",\n      "completed": true,\n      "created": "2020-01-14T07:00:31.763Z",\n      "updated": "2020-01-14T09:02:28.167Z"\n    }\n  }\n}\n')))),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"update-many"},"Update Many"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"CRUDResolver")," will by default expose an ",(0,r.kt)("inlineCode",{parentName:"p"},"updateMany")," mutation that takes two fields:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"filter"),": The filter to use to find the records to update.",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"NOTE")," The filter ",(0,r.kt)("strong",{parentName:"li"},"CANNOT")," be an empty object. This prevents accidental updating of all records."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"update"),": The values to update on the record. This is a partial so you only have to pass in the values you want to\nchange.")),(0,r.kt)("p",null,"The response contains the number of records updated."),(0,r.kt)("h4",{id:"examples-2"},"Examples"),(0,r.kt)("p",null,"The following example updates records with an ",(0,r.kt)("inlineCode",{parentName:"p"},"id")," equal to 1 or 2 to ",(0,r.kt)("inlineCode",{parentName:"p"},"completed=true"),"."),(0,r.kt)(o.Z,{defaultValue:"graphql",values:[{label:"GraphQL",value:"graphql"},{label:"Response",value:"response"}],mdxType:"Tabs"},(0,r.kt)(p.Z,{value:"graphql",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"mutation {\n  updateManyTodoItems(\n    input: { filter: { id: { in: [1, 2] } }, update: { completed: true } }\n  ) {\n    updatedCount\n  }\n}\n"))),(0,r.kt)(p.Z,{value:"response",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "data": {\n    "updateManyTodoItems": {\n      "updatedCount": 2\n    }\n  }\n}\n')))),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"delete-one"},"Delete One"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"CRUDResolver")," will by default expose a ",(0,r.kt)("inlineCode",{parentName:"p"},"deleteOne")," mutation that allows you to delete a record by id:"),(0,r.kt)("h4",{id:"examples-3"},"Examples"),(0,r.kt)("p",null,"The following example deletes the record with an id equal to 1."),(0,r.kt)(o.Z,{defaultValue:"graphql",values:[{label:"GraphQL",value:"graphql"},{label:"Response",value:"response"}],mdxType:"Tabs"},(0,r.kt)(p.Z,{value:"graphql",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"mutation {\n  deleteOneTodoItem(input: { id: 1 }) {\n    id\n    title\n    completed\n    created\n    updated\n  }\n}\n"))),(0,r.kt)(p.Z,{value:"response",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "data": {\n    "deleteOneTodoItem": {\n      "title": "Create One Todo Item",\n      "completed": true,\n      "created": "2020-01-14T07:00:31.763Z",\n      "updated": "2020-01-14T09:02:51.429Z"\n    }\n  }\n}\n')))),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"delete-many"},"Delete Many"),(0,r.kt)("p",null,"The CRUDResolver will by default expose a ",(0,r.kt)("inlineCode",{parentName:"p"},"deleteMany")," mutation that takes a ",(0,r.kt)("inlineCode",{parentName:"p"},"filter"),":"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"NOTE")," The filter ",(0,r.kt)("strong",{parentName:"p"},"CANNOT")," be an empty object. This prevents accidental deletion of all records."),(0,r.kt)("h4",{id:"examples-4"},"Examples"),(0,r.kt)("p",null,"The following example deletes all records that start with ",(0,r.kt)("inlineCode",{parentName:"p"},"Create Many Todo Items"),"."),(0,r.kt)(o.Z,{defaultValue:"graphql",values:[{label:"GraphQL",value:"graphql"},{label:"Response",value:"response"}],mdxType:"Tabs"},(0,r.kt)(p.Z,{value:"graphql",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},'mutation {\n  deleteManyTodoItems(\n    input: { filter: { title: { like: "Create Many Todo Items%" } } }\n  ) {\n    deletedCount\n  }\n}\n'))),(0,r.kt)(p.Z,{value:"response",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "data": {\n    "deleteManyTodoItems": {\n      "deletedCount": 6\n    }\n  }\n}\n')))))}h.isMDXComponent=!0}}]);